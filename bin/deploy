#!/usr/bin/env bash
set -ex

export SOLC_FLAGS=${SOLC_FLAGS:-"--optimize"}
export ETH_GAS=${ETH_GAS:-"3500000"}
export ETH_FROM=${ETH_FROM:-$(seth rpc eth_coinbase)}

dapp build

export SETH_ASYNC=yes

test -z $SAI_GEM && GEMtx=$(dapp create DSToken $(seth --to-bytes32 $(seth --from-ascii 'ETH')))
test -z $SAI_GOV && GOVtx=$(dapp create DSToken $(seth --to-bytes32 $(seth --from-ascii 'GOV')))
SAItx=$(dapp create DSToken $(seth --to-bytes32 $(seth --from-ascii 'SAI')))
SINtx=$(dapp create DSToken $(seth --to-bytes32 $(seth --from-ascii 'SIN')))
SKRtx=$(dapp create DSToken $(seth --to-bytes32 $(seth --from-ascii 'SKR')))
test -z $SAI_TAG && TAGtx=$(dapp create DSValue)
test -z $SAI_PEP && PEPtx=$(dapp create DSValue)
VOXtx=$(dapp create SaiVox)
TAPtx=$(dapp create SaiTap)

DADtx=$(dapp create DSRoles)

export SETH_ASYNC=no

test -z $SAI_GEM && SAI_GEM=$(seth receipt $GEMtx contractAddress)
test -z $SAI_GOV && SAI_GOV=$(seth receipt $GOVtx contractAddress)
SAI_SAI=$(seth receipt $SAItx contractAddress)
SAI_SIN=$(seth receipt $SINtx contractAddress)
SAI_SKR=$(seth receipt $SKRtx contractAddress)
test -z $SAI_TAG && SAI_TAG=$(seth receipt $TAGtx contractAddress)
test -z $SAI_PEP && SAI_PEP=$(seth receipt $PEPtx contractAddress)
SAI_VOX=$(seth receipt $VOXtx contractAddress)
SAI_TAP=$(seth receipt $TAPtx contractAddress)
test -z $SAI_PIT && SAI_PIT="0x0000000000000000000000000000000000000123"
SAI_TUB=$(dapp create SaiTub $SAI_SAI $SAI_SIN $SAI_SKR $SAI_GEM $SAI_GOV $SAI_TAG $SAI_PEP $SAI_VOX $SAI_TAP $SAI_PIT)
SAI_TOP=$(dapp create SaiTop $SAI_TUB $SAI_TAP)
seth send $SAI_TAP 'turn(address)' $SAI_TUB

SAI_MOM=$(dapp create SaiMom $SAI_TUB $SAI_TAP $SAI_VOX)

SAI_DAD=$(seth receipt $DADtx contractAddress)

export SETH_ASYNC=yes

SYS_ROLE=0
TOP_ROLE=1
MOM_ROLE=2
CAGE_ROLE=3

test -z $SAI_CAGE_AUTH && SAI_CAGE_AUTH=$ETH_FROM

seth send $SAI_VOX "setAuthority(address)" $SAI_DAD
seth send $SAI_TUB "setAuthority(address)" $SAI_DAD
seth send $SAI_TAP "setAuthority(address)" $SAI_DAD
seth send $SAI_TOP "setAuthority(address)" $SAI_DAD

seth send $SAI_SAI "setAuthority(address)" $SAI_DAD
seth send $SAI_SIN "setAuthority(address)" $SAI_DAD
seth send $SAI_SKR "setAuthority(address)" $SAI_DAD

seth send $SAI_DAD "setUserRole(address,uint8,bool)" $SAI_TOP $TOP_ROLE true
seth send $SAI_DAD "setUserRole(address,uint8,bool)" $SAI_MOM $MOM_ROLE true
seth send $SAI_DAD "setUserRole(address,uint8,bool)" $SAI_VOX $SYS_ROLE true
seth send $SAI_DAD "setUserRole(address,uint8,bool)" $SAI_TUB $SYS_ROLE true
seth send $SAI_DAD "setUserRole(address,uint8,bool)" $SAI_TAP $SYS_ROLE true
seth send $SAI_DAD "setUserRole(address,uint8,bool)" $SAI_CAGE_AUTH $CAGE_ROLE true

seth send $SAI_DAD "setRoleCapability(uint8,address,bytes4,bool)" $TOP_ROLE $SAI_TUB $(seth calldata 'cage(uint256,uint256)') true
seth send $SAI_DAD "setRoleCapability(uint8,address,bytes4,bool)" $TOP_ROLE $SAI_TUB $(seth calldata 'flow()') true
seth send $SAI_DAD "setRoleCapability(uint8,address,bytes4,bool)" $TOP_ROLE $SAI_TAP $(seth calldata 'cage(uint256)') true

seth send $SAI_DAD "setRoleCapability(uint8,address,bytes4,bool)" $MOM_ROLE $SAI_VOX $(seth calldata 'mold(bytes32,uint256)') true
seth send $SAI_DAD "setRoleCapability(uint8,address,bytes4,bool)" $MOM_ROLE $SAI_TUB $(seth calldata 'mold(bytes32,uint256)') true
seth send $SAI_DAD "setRoleCapability(uint8,address,bytes4,bool)" $MOM_ROLE $SAI_TAP $(seth calldata 'mold(bytes32,uint256)') true

seth send $SAI_DAD "setRoleCapability(uint8,address,bytes4,bool)" $SYS_ROLE $SAI_SKR $(seth calldata 'mint(address,uint256)') true
seth send $SAI_DAD "setRoleCapability(uint8,address,bytes4,bool)" $SYS_ROLE $SAI_SKR $(seth calldata 'mint(uint256)') true
seth send $SAI_DAD "setRoleCapability(uint8,address,bytes4,bool)" $SYS_ROLE $SAI_SKR $(seth calldata 'burn(address,uint256)') true
seth send $SAI_DAD "setRoleCapability(uint8,address,bytes4,bool)" $SYS_ROLE $SAI_SKR $(seth calldata 'burn(uint256)') true

seth send $SAI_DAD "setRoleCapability(uint8,address,bytes4,bool)" $SYS_ROLE $SAI_SAI $(seth calldata 'mint(address,uint256)') true
seth send $SAI_DAD "setRoleCapability(uint8,address,bytes4,bool)" $SYS_ROLE $SAI_SAI $(seth calldata 'mint(uint256)') true
seth send $SAI_DAD "setRoleCapability(uint8,address,bytes4,bool)" $SYS_ROLE $SAI_SAI $(seth calldata 'burn(address,uint256)') true
seth send $SAI_DAD "setRoleCapability(uint8,address,bytes4,bool)" $SYS_ROLE $SAI_SAI $(seth calldata 'burn(uint256)') true

seth send $SAI_DAD "setRoleCapability(uint8,address,bytes4,bool)" $SYS_ROLE $SAI_SIN $(seth calldata 'mint(address,uint256)') true
seth send $SAI_DAD "setRoleCapability(uint8,address,bytes4,bool)" $SYS_ROLE $SAI_SIN $(seth calldata 'mint(uint256)') true
seth send $SAI_DAD "setRoleCapability(uint8,address,bytes4,bool)" $SYS_ROLE $SAI_SIN $(seth calldata 'burn(address,uint256)') true
seth send $SAI_DAD "setRoleCapability(uint8,address,bytes4,bool)" $SYS_ROLE $SAI_SIN $(seth calldata 'burn(uint256)') true

seth send $SAI_DAD "setRoleCapability(uint8,address,bytes4,bool)" $CAGE_ROLE $SAI_TOP $(seth calldata 'cage(uint256)') true
seth send $SAI_DAD "setRoleCapability(uint8,address,bytes4,bool)" $CAGE_ROLE $SAI_TOP $(seth calldata 'cage()') true
seth send $SAI_DAD "setRoleCapability(uint8,address,bytes4,bool)" $CAGE_ROLE $SAI_TOP $(seth calldata 'setCooldown(uint256)') true

cat > load-env-$(seth chain) << EOF
#!/bin/bash

# sai deployment on $(seth chain) from $(git rev-parse HEAD)
# $(date)

export SAI_GEM=$SAI_GEM
export SAI_GOV=$SAI_GOV
export SAI_SAI=$SAI_SAI
export SAI_SIN=$SAI_SIN
export SAI_SKR=$SAI_SKR
export SAI_TAG=$SAI_TAG
export SAI_PEP=$SAI_PEP
export SAI_DAD=$SAI_DAD
export SAI_MOM=$SAI_MOM
export SAI_VOX=$SAI_VOX
export SAI_PIT=$SAI_PIT
export SAI_CAGE_AUTH=$SAI_CAGE_AUTH
export SAI_TUB=$SAI_TUB
export SAI_TAP=$SAI_TAP
export SAI_TOP=$SAI_TOP
EOF
